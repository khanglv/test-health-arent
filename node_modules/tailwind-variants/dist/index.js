import { b, d, c, a, e } from './chunk-X3I5ASPE.js';
import { twMerge, extendTailwindMerge } from 'tailwind-merge';

var fe={twMerge:!0,twMergeConfig:{},responsiveVariants:!1},X=e=>e||void 0,w=(...e)=>X(e.flat(1/0).filter(Boolean).join(" ")),h=(...e)=>g=>{if(!g.twMerge)return w(e);let y=b(g.twMergeConfig)?twMerge:extendTailwindMerge(g.twMergeConfig);return X(y(w(e)))},Q=(e,g)=>{let y={...e};for(let b in g)y.hasOwnProperty(b)?y[b]=w(y[b],g[b]):y[b]=g[b];return y},ce=(e$1,g)=>{var N,T,k,F,R;let{slots:y={},variants:b$1={},compoundVariants:V=[],compoundSlots:A=[],defaultVariants:Y={}}=e$1,m=Object.assign({},fe,g),M=w((N=e$1==null?void 0:e$1.extend)==null?void 0:N.base,e$1==null?void 0:e$1.base),c$1=d(b$1,(T=e$1==null?void 0:e$1.extend)==null?void 0:T.variants),x=Object.assign({},(k=e$1==null?void 0:e$1.extend)==null?void 0:k.defaultVariants,Y),$=b(y)?{}:{base:e$1==null?void 0:e$1.base,...y},Z=Array.isArray(m.responsiveVariants)&&m.responsiveVariants.length>0||m.responsiveVariants===!0,O=b((F=e$1==null?void 0:e$1.extend)==null?void 0:F.slots)?$:Q((R=e$1==null?void 0:e$1.extend)==null?void 0:R.slots,b($)?{base:e$1==null?void 0:e$1.base}:$),j=l=>{var q,z,D,G;if(b(c$1)&&b(y)&&b((q=e$1==null?void 0:e$1.extend)==null?void 0:q.slots))return h(M,l==null?void 0:l.class,l==null?void 0:l.className)(m);if(V&&!Array.isArray(V))throw new TypeError(`The "compoundVariants" prop must be an array. Received: ${typeof V}`);if(A&&!Array.isArray(A))throw new TypeError(`The "compoundSlots" prop must be an array. Received: ${typeof A}`);let o=(t,r,n=[],s)=>{let f=n;if(typeof r=="string")f.push(e(r).split(" ").map(a=>`${t}:${a}`));else if(Array.isArray(r))f.push(r.flatMap(a=>`${t}:${a}`));else if(typeof r=="object"&&typeof s=="string"){let a=r==null?void 0:r[s];if(a&&typeof a=="string"){let u=e(a);f[s]=f[s]?[...f[s],...u.split(" ").map(d=>`${t}:${d}`)]:u.split(" ").map(d=>`${t}:${d}`);}else Array.isArray(a)&&a.length>0&&(f[s]=a.flatMap(u=>`${t}:${u}`));}return f},I=(t,r=c$1,n=null)=>{let s=r==null?void 0:r[t];if(typeof s!="object"||b(s))return null;let f=l==null?void 0:l[t],a$1=x==null?void 0:x[t],u=[];if(f===null)return null;let d=a(f);typeof d=="object"&&Z&&(u=Object.keys(d).reduce((S,v)=>{let H=d[v],ae=s==null?void 0:s[H];return v==="initial"?(a$1=H,S):Array.isArray(m.responsiveVariants)&&!m.responsiveVariants.includes(v)?S:o(v,ae,S,n)},[]));let C=s[d]||s[a(a$1)];return typeof u=="object"&&typeof n=="string"&&u[n]?Q(u,C):u.length>0?[C,...u]:C},K=()=>c$1?Object.keys(c$1).map(t=>I(t,c$1)):null,p=t=>!c$1||typeof c$1!="object"?null:Object.keys(c$1).map(r=>{let n=I(r,c$1,t);return t==="base"&&typeof n=="string"?n:n&&n[t]}).filter(Boolean),ee=l&&Object.fromEntries(Object.entries(l).filter(([,t])=>t!==void 0)),P=t=>{var n;let r=typeof(l==null?void 0:l[t])=="object"?{[t]:(n=l[t])==null?void 0:n.initial}:{};return {...x,...ee,...r}},U=(t=[])=>t==null?void 0:t.filter(({class:r,className:n,...s})=>Object.entries(s).every(([f,a])=>{let u=P(f);return Array.isArray(a)?a.includes(u[f]):u[f]===a})).flatMap(({class:r,className:n})=>[r,n]),W=()=>{var n;let t=U(V),r=U((n=e$1==null?void 0:e$1.extend)==null?void 0:n.compoundVariants);return c(r,t)},te=()=>{let t=W();return Array.isArray(t)?t.reduce((r,n)=>(typeof n=="string"&&(r.base=h(r.base,n)(m)),typeof n=="object"&&Object.entries(n).forEach(([s,f])=>{r[s]=h(r[s],f)(m);}),r),{}):t},re=()=>A.length<1?null:A.reduce((t,r)=>{let{slots:n=[],class:s,className:f,...a}=r;if(!b(a)){let u=Object.keys(a);for(let d of u){let C=P(d)[d];if(!C||C!==a[d])return t}}return n.forEach(u=>{t[u]||(t[u]=[]),t[u].push([s,f]);}),t},{});if(!b(y)||!b((z=e$1==null?void 0:e$1.extend)==null?void 0:z.slots)){let t=(D=te())!=null?D:[],r=(G=re())!=null?G:[];return {...typeof O=="object"&&!b(O)?Object.keys(O).reduce((s,f)=>(s[f]=a=>h(O[f],p(f),t==null?void 0:t[f],r==null?void 0:r[f],a==null?void 0:a.class,a==null?void 0:a.className)(m),s),{}):{}}}return h(M,K(),W(),l==null?void 0:l.class,l==null?void 0:l.className)(m)},_=()=>{if(!(!c$1||typeof c$1!="object"))return Object.keys(c$1)};return j.variantKeys=_(),j.base=M,j.slots=O,j.variants=c$1,j.defaultVariants=x,j.compoundSlots=A,j.compoundVariants=V,j};

export { h as cn, w as cnBase, fe as defaultConfig, ce as tv, X as voidEmpty };
